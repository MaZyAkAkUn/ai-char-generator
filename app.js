
async function generatePersona() {
  const apiKey = document.getElementById("apiKeyInput").value;
  const model = document.getElementById("modelInput").value || "gpt-4";
  const name = document.getElementById("personaName").value;
  const role = document.getElementById("personaRole").value;
  const style = document.getElementById("personaStyle").value;
  const desc = document.getElementById("customDescription").value;
  const basePrompt = document.getElementById("basePrompt").value;

  const prompt = basePrompt
    .replace("{{name}}", name)
    .replace("{{role}}", role)
    .replace("{{style}}", style)
    .replace("{{desc}}", desc);

  const resultArea = document.getElementById("generatedOutput");
  resultArea.value = "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...";

  try {
    const res = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model: model,
        messages: [
          { role: "system", content: "You are a character generator AI." },
          { role: "user", content: prompt }
        ],
        temperature: 0.9
      })
    });

    const data = await res.json();
    if (data.choices && data.choices.length > 0) {
      resultArea.value = data.choices[0].message.content.trim();
    } else {
      resultArea.value = "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –º–æ–¥–µ–ª—ñ.";
    }

  } catch (err) {
    resultArea.value = `‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: ${err.message}`;
  }
}

async function generateAvatar() {
  const apiKey = document.getElementById("apiKeyInput").value;
  const personaYaml = document.getElementById("generatedOutput").value;

  if (!personaYaml || !apiKey) {
    alert("–°–ø–æ—á–∞—Ç–∫—É –∑–≥–µ–Ω–µ—Ä—É–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Ç–∞ –≤–≤–µ–¥–∏ API –∫–ª—é—á.");
    return;
  }

  const descriptionPrompt = `
–¢–∏ ‚Äî AI, —â–æ —Å—Ç–≤–æ—Ä—é—î —Ö—É–¥–æ–∂–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–≤–∞—Ç–∞—Ä—ñ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤.
–ù–∞ –æ—Å–Ω–æ–≤—ñ –ø—Ä–æ—Ñ—ñ–ª—é –Ω–∏–∂—á–µ, —Å—Ç–≤–æ—Ä–∏ –æ–¥–∏–Ω-—î–¥–∏–Ω–∏–π –∞–Ω–≥–ª–æ–º–æ–≤–Ω–∏–π –æ–ø–∏—Å –∞–≤–∞—Ç–∞—Ä—É –≤ —Å—Ç–∏–ª—ñ —Ñ–æ—Ç–æ—Ä–µ–∞–ª—ñ–∑–º—É –∞–±–æ digital-art:

–ü—Ä–æ—Ñ—ñ–ª—å:
${personaYaml}

–í–∏–≤—ñ–¥:
–û–ø–∏—Å –∞–≤–∞—Ç–∞—Ä—É –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é. –ë–µ–∑ YAML —á–∏ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è.
`.trim();

  const avatarStatus = document.getElementById("avatarStatus");
  avatarStatus.textContent = "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–º–ø—Ç—É –¥–ª—è –∞–≤–∞—Ç–∞—Ä—É...";

  try {
    const res = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: "You generate prompts for DALL¬∑E avatar generation." },
          { role: "user", content: descriptionPrompt }
        ],
        temperature: 0.8
      })
    });

    const data = await res.json();
    const avatarPrompt = data.choices[0].message.content.trim();
    avatarStatus.textContent = "üß† –ü—Ä–æ–º–ø—Ç –≥–æ—Ç–æ–≤–∏–π, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–∞ DALL¬∑E...";

    const imgRes = await fetch("https://api.openai.com/v1/images/generations", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model: "dall-e-3",
        prompt: avatarPrompt,
        n: 1,
        size: "1024x1024"
      })
    });

    const imgData = await imgRes.json();
    if (imgData && imgData.data && imgData.data.length > 0) {
      const imgUrl = imgData.data[0].url;
      document.getElementById("avatarImage").src = imgUrl;
      avatarStatus.textContent = "‚úÖ –ê–≤–∞—Ç–∞—Ä –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ";
    } else {
      avatarStatus.textContent = "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∞–≤–∞—Ç–∞—Ä.";
    }

  } catch (err) {
    avatarStatus.textContent = "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–≤–∞—Ç–∞—Ä—É: " + err.message;
  }
}
